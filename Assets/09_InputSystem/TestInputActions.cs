//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/09_InputSystem/TestInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputActions"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""b8d4b10c-5048-4be8-92e4-d1cdf1f719a6"",
            ""actions"": [
                {
                    ""name"": ""onTest1"",
                    ""type"": ""Button"",
                    ""id"": ""f5a8f05a-c119-4241-a69d-5c35f7372d45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""onTest2"",
                    ""type"": ""Button"",
                    ""id"": ""f42e2266-e754-4d64-b907-82af935d7d02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""onTest3"",
                    ""type"": ""Button"",
                    ""id"": ""c91c321f-1a7f-4629-9f98-4fc9783e8fab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""onTest4"",
                    ""type"": ""Button"",
                    ""id"": ""679de5b2-7417-4aa2-b832-d7cad098e777"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""onTest5"",
                    ""type"": ""Button"",
                    ""id"": ""1e9aa20e-21de-4dfe-b8bd-21541e09c54c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d600f7d5-90b8-4f8b-8d0b-ac64cd7d2db4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""onTest1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f759092-d282-4fd0-8a1b-05cdaf3f806f"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""onTest2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98516a0c-abea-42e4-9f1e-8a0d61e19656"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""onTest3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4784624-5cea-4d7e-8f36-e7ac19ee4b77"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""onTest4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8407c9bf-94eb-4f1c-a068-bef668e0b91f"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""onTest5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Test"",
            ""bindingGroup"": ""Test"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_onTest1 = m_Test.FindAction("onTest1", throwIfNotFound: true);
        m_Test_onTest2 = m_Test.FindAction("onTest2", throwIfNotFound: true);
        m_Test_onTest3 = m_Test.FindAction("onTest3", throwIfNotFound: true);
        m_Test_onTest4 = m_Test.FindAction("onTest4", throwIfNotFound: true);
        m_Test_onTest5 = m_Test.FindAction("onTest5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_onTest1;
    private readonly InputAction m_Test_onTest2;
    private readonly InputAction m_Test_onTest3;
    private readonly InputAction m_Test_onTest4;
    private readonly InputAction m_Test_onTest5;
    public struct TestActions
    {
        private @TestInputActions m_Wrapper;
        public TestActions(@TestInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @onTest1 => m_Wrapper.m_Test_onTest1;
        public InputAction @onTest2 => m_Wrapper.m_Test_onTest2;
        public InputAction @onTest3 => m_Wrapper.m_Test_onTest3;
        public InputAction @onTest4 => m_Wrapper.m_Test_onTest4;
        public InputAction @onTest5 => m_Wrapper.m_Test_onTest5;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @onTest1.started += instance.OnOnTest1;
            @onTest1.performed += instance.OnOnTest1;
            @onTest1.canceled += instance.OnOnTest1;
            @onTest2.started += instance.OnOnTest2;
            @onTest2.performed += instance.OnOnTest2;
            @onTest2.canceled += instance.OnOnTest2;
            @onTest3.started += instance.OnOnTest3;
            @onTest3.performed += instance.OnOnTest3;
            @onTest3.canceled += instance.OnOnTest3;
            @onTest4.started += instance.OnOnTest4;
            @onTest4.performed += instance.OnOnTest4;
            @onTest4.canceled += instance.OnOnTest4;
            @onTest5.started += instance.OnOnTest5;
            @onTest5.performed += instance.OnOnTest5;
            @onTest5.canceled += instance.OnOnTest5;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @onTest1.started -= instance.OnOnTest1;
            @onTest1.performed -= instance.OnOnTest1;
            @onTest1.canceled -= instance.OnOnTest1;
            @onTest2.started -= instance.OnOnTest2;
            @onTest2.performed -= instance.OnOnTest2;
            @onTest2.canceled -= instance.OnOnTest2;
            @onTest3.started -= instance.OnOnTest3;
            @onTest3.performed -= instance.OnOnTest3;
            @onTest3.canceled -= instance.OnOnTest3;
            @onTest4.started -= instance.OnOnTest4;
            @onTest4.performed -= instance.OnOnTest4;
            @onTest4.canceled -= instance.OnOnTest4;
            @onTest5.started -= instance.OnOnTest5;
            @onTest5.performed -= instance.OnOnTest5;
            @onTest5.canceled -= instance.OnOnTest5;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_TestSchemeIndex = -1;
    public InputControlScheme TestScheme
    {
        get
        {
            if (m_TestSchemeIndex == -1) m_TestSchemeIndex = asset.FindControlSchemeIndex("Test");
            return asset.controlSchemes[m_TestSchemeIndex];
        }
    }
    public interface ITestActions
    {
        void OnOnTest1(InputAction.CallbackContext context);
        void OnOnTest2(InputAction.CallbackContext context);
        void OnOnTest3(InputAction.CallbackContext context);
        void OnOnTest4(InputAction.CallbackContext context);
        void OnOnTest5(InputAction.CallbackContext context);
    }
}
